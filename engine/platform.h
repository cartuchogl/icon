#ifndef _platform_h_
#define _platform_h_

#include <SDL.h>

struct Keyboard
{
	enum List
	{
		kbackspace = SDLK_BACKSPACE,
		ktab = SDLK_TAB,
		kclear = SDLK_CLEAR,
		kreturn = SDLK_RETURN,
		kpause = SDLK_PAUSE,
		kescape = SDLK_ESCAPE,
		kspace = SDLK_SPACE,
		kexclaim = SDLK_EXCLAIM,
		kquotedbl = SDLK_QUOTEDBL,
		khash = SDLK_HASH,
		kdollar = SDLK_DOLLAR,
		kampersand = SDLK_AMPERSAND,
		kquote = SDLK_QUOTE,
		kleftparen = SDLK_LEFTPAREN,
		krightparen = SDLK_RIGHTPAREN,
		kasterisk = SDLK_ASTERISK,
		kplus = SDLK_PLUS,
		kcomma = SDLK_COMMA,
		kminus = SDLK_MINUS,
		kperiod = SDLK_PERIOD,
		kslash = SDLK_SLASH,
		k0 = SDLK_0,
		k1 = SDLK_1,
		k2 = SDLK_2,
		k3 = SDLK_3,
		k4 = SDLK_4,
		k5 = SDLK_5,
		k6 = SDLK_6,
		k7 = SDLK_7,
		k8 = SDLK_8,
		k9 = SDLK_9,
		kcolon = SDLK_COLON,
		ksemicolon = SDLK_SEMICOLON,
		kless = SDLK_LESS,
		kequals = SDLK_EQUALS,
		kgreater = SDLK_GREATER,
		kquestion = SDLK_QUESTION,
		kat = SDLK_AT,
		kleftbracket = SDLK_LEFTBRACKET,
		kbackslash = SDLK_BACKSLASH,
		krightbracket = SDLK_RIGHTBRACKET,
		kcaret = SDLK_CARET,
		kunderscore = SDLK_UNDERSCORE,
		kbackquote = SDLK_BACKQUOTE,
		ka = SDLK_a,
		kb = SDLK_b,
		kc = SDLK_c,
		kd = SDLK_d,
		ke = SDLK_e,
		kf = SDLK_f,
		kg = SDLK_g,
		kh = SDLK_h,
		ki = SDLK_i,
		kj = SDLK_j,
		kk = SDLK_k,
		kl = SDLK_l,
		km = SDLK_m,
		kn = SDLK_n,
		ko = SDLK_o,
		kp = SDLK_p,
		kq = SDLK_q,
		kr = SDLK_r,
		ks = SDLK_s,
		kt = SDLK_t,
		ku = SDLK_u,
		kv = SDLK_v,
		kw = SDLK_w,
		kx = SDLK_x,
		ky = SDLK_y,
		kz = SDLK_z,
		kdelete = SDLK_DELETE,
		keypad0 = SDLK_KP0,
		keypad1 = SDLK_KP1,
		keypad2 = SDLK_KP2,
		keypad3 = SDLK_KP3,
		keypad4 = SDLK_KP4,
		keypad5 = SDLK_KP5,
		keypad6 = SDLK_KP6,
		keypad7 = SDLK_KP7,
		keypad8 = SDLK_KP8,
		keypad9 = SDLK_KP9,
		keypad_period = SDLK_KP_PERIOD,
		keypad_divide = SDLK_KP_DIVIDE,
		keypad_multiply = SDLK_KP_MULTIPLY,
		keypad_minus = SDLK_KP_MINUS,
		keypad_plus = SDLK_KP_PLUS,
		keypad_enter = SDLK_KP_ENTER,
		keypad_equals = SDLK_KP_EQUALS,
		kup = SDLK_UP,
		kdown = SDLK_DOWN,
		kright = SDLK_RIGHT,
		kleft = SDLK_LEFT,
		kinsert = SDLK_INSERT,
		khome = SDLK_HOME,
		kend = SDLK_END,
		kpageup = SDLK_PAGEUP,
		kpagedown = SDLK_PAGEDOWN,
		kf1 = SDLK_F1,
		kf2 = SDLK_F2,
		kf3 = SDLK_F3,
		kf4 = SDLK_F4,
		kf5 = SDLK_F5,
		kf6 = SDLK_F6,
		kf7 = SDLK_F7,
		kf8 = SDLK_F8,
		kf9 = SDLK_F9,
		kf10 = SDLK_F10,
		kf11 = SDLK_F11,
		kf12 = SDLK_F12,
		kf13 = SDLK_F13,
		kf14 = SDLK_F14,
		kf15 = SDLK_F15,
		knumlock = SDLK_NUMLOCK,
		kcapslock = SDLK_CAPSLOCK,
		kscrollock = SDLK_SCROLLOCK,
		krshift = SDLK_RSHIFT,
		klshift = SDLK_LSHIFT,
		krctrl = SDLK_RCTRL,
		klctrl = SDLK_LCTRL,
		kralt = SDLK_RALT,
		klalt = SDLK_LALT,
		krmeta = SDLK_RMETA,
		klmeta = SDLK_LMETA,
		klsuper = SDLK_LSUPER,
		krsuper = SDLK_RSUPER,
		kmode = SDLK_MODE,
		khelp = SDLK_HELP,
		kprint = SDLK_PRINT,
		ksysreq = SDLK_SYSREQ,
		kbreak = SDLK_BREAK,
		kmenu = SDLK_MENU,
		kpower = SDLK_POWER,
		keuro = SDLK_EURO
	};
};

extern "C" {
void setWindowTitle(char *caption);
int setWindow(char *caption,int width,int height,int fullscreen);
int getWidth(void);
int getHeight(void);
int getTime(void);
void quit(void);
void reset(void);
const char *getPlatform(void);
const char *getCpuFlags(void);
}

#endif

